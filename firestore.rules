
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is an authenticated admin.
    function isAdmin() {
      // This is a basic check. In a real-world scenario, you might have a 'roles' collection
      // or custom claims to verify admin status more securely.
      return request.auth != null;
    }

    // Default rule: Deny all reads and writes by default for security.
    match /{document=**} {
      allow read, write: if false;
    }

    // Rules for the 'articles' collection
    match /articles/{articleId} {
      allow read: if true; // Anyone can read articles
      allow write: if isAdmin(); // Only admins can create, update, delete
    }

    // Rules for the 'programs' collection
    match /programs/{programId} {
      allow read: if true; // Anyone can read programs
      allow write: if isAdmin(); // Only admins can manage programs
    }

    // Rules for the 'galleryImages' collection
    match /galleryImages/{imageId} {
      allow read: if true; // Anyone can view gallery images
      allow write: if isAdmin(); // Only admins can manage the gallery history
    }

    // Rules for the 'settings' collection (e.g., for SEO)
    match /settings/{settingId} {
        allow read: if true; // SEO settings need to be public for layout rendering
        allow write: if isAdmin(); // Only admins can change SEO settings
    }
    
    // Rules for 'users' collection.
    // User data should be managed by Firebase Auth and backend functions,
    // but admins may need read access for management purposes.
    match /users/{userId} {
        allow read: if isAdmin(); // Allow authenticated admins to read user data
        allow write: if false;      // Disallow client-side writes for security
    }
  }
}
