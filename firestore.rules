
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // == Helper Functions ==
    // Checks if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the authenticated user is an admin by looking up their role in the 'users' collection.
    // This is a secure way to manage roles.
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Super Admin'];
    }

    // == Collection Rules ==

    // Articles: Public can read, only admins can write.
    match /articles/{articleId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Programs: Public can read, only admins can write.
    match /programs/{programId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Gallery Images: Public can read, only admins can write.
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Settings (for SEO): Public can read, only admins can write.
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Users collection: Only admins can list/view user data.
    // No one can write to prevent privilege escalation from the client.
    match /users/{userId} {
      allow read, write: if isAdmin();
    }
  }
}
