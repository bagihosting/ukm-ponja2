
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    // In a real-world scenario, you might also check for a 'role' claim.
    function isAdmin() {
      return request.auth != null;
    }

    // Rules for the 'articles' collection
    match /articles/{articleId} {
      // Anyone can read the list of articles or a single article.
      allow get, list: if true;
      // Only authenticated admins can create, update, or delete articles.
      allow create, update, delete: if isAdmin();
    }
    
    // Rules for the 'programs' collection
    match /programs/{programId} {
      // Anyone can read the list of programs or a single program.
      allow get, list: if true;
      // Only authenticated admins can create, update, or delete programs.
      allow create, update, delete: if isAdmin();
    }

    // Rules for the 'galleryImages' collection
    match /galleryImages/{imageId} {
      // Anyone can read the list of gallery images or a single image record.
      allow get, list: if true;
      // Only authenticated admins can create, update, or delete gallery image records.
      allow create, update, delete: if isAdmin();
    }
    
    // Rules for the 'settings' collection
    match /settings/{settingId} {
      // Anyone can read settings documents (like SEO).
      allow get, list: if true;
      // Only authenticated admins can write to settings.
      allow write: if isAdmin();
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
       // Only admins can read user data. No one can list all users from the client.
      allow get: if isAdmin();
      // Writing to the users collection should be handled by server-side logic or functions, not directly from the client.
      allow list, write: if false;
    }
  }
}
